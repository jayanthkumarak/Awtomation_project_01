{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { API } from 'aws-amplify';\n\n// Mock API endpoint for compliance\nconst API_NAME = 'complianceApi';\nconst SCANS_PATH = '/scans';\nconst REMEDIATE_PATH = '/remediate';\n\n/**\n * Async thunk to run a new compliance scan\n */\nexport const runComplianceScan = createAsyncThunk('compliance/runScan', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // Uncomment when API is ready:\n    // const response = await API.post(API_NAME, SCANS_PATH);\n    // return response;\n\n    // Mock API response with delay to simulate scan\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Generate mock scan results\n    const mockResults = {\n      scanId: `scan-${Date.now()}`,\n      timestamp: new Date().toISOString(),\n      summary: {\n        totalChecks: 25,\n        passedChecks: 18,\n        failedChecks: 5,\n        warningChecks: 2,\n        complianceScore: 72\n      },\n      controls: generateMockControls()\n    };\n    return mockResults;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to run compliance scan');\n  }\n});\n\n/**\n * Async thunk to load compliance scan history\n */\nexport const loadScanHistory = createAsyncThunk('compliance/loadHistory', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // Uncomment when API is ready:\n    // const response = await API.get(API_NAME, SCANS_PATH);\n    // return response;\n\n    // Mock API response\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    // Generate mock scan history (last 6 scans)\n    const history = [];\n    const now = new Date();\n    for (let i = 0; i < 6; i++) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i * 5); // Every 5 days\n\n      const passedChecks = 18 + Math.floor(Math.random() * 7) - 3; // Between 15-22\n      const totalChecks = 25;\n      history.push({\n        scanId: `scan-${date.getTime()}`,\n        timestamp: date.toISOString(),\n        summary: {\n          totalChecks,\n          passedChecks,\n          failedChecks: totalChecks - passedChecks - Math.floor(Math.random() * 3),\n          warningChecks: Math.floor(Math.random() * 3),\n          complianceScore: Math.round(passedChecks / totalChecks * 100)\n        }\n      });\n    }\n    return history.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to load scan history');\n  }\n});\n\n/**\n * Async thunk to load a specific scan result by ID\n */\nexport const loadScanById = createAsyncThunk('compliance/loadScanById', async (scanId, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // Uncomment when API is ready:\n    // const response = await API.get(API_NAME, `${SCANS_PATH}/${scanId}`);\n    // return response;\n\n    // Mock API response\n    await new Promise(resolve => setTimeout(resolve, 600));\n\n    // Generate a consistent mock result for the given scan ID\n    const seedValue = parseInt(scanId.replace('scan-', ''));\n    const mockResults = {\n      scanId,\n      timestamp: new Date(seedValue).toISOString(),\n      summary: {\n        totalChecks: 25,\n        passedChecks: 18,\n        failedChecks: 5,\n        warningChecks: 2,\n        complianceScore: 72\n      },\n      controls: generateMockControls(seedValue)\n    };\n    return mockResults;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to load scan results');\n  }\n});\n\n/**\n * Async thunk to remediate a non-compliant control\n */\nexport const remediateControl = createAsyncThunk('compliance/remediateControl', async ({\n  controlId,\n  scanId\n}, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // Uncomment when API is ready:\n    // const response = await API.post(API_NAME, REMEDIATE_PATH, {\n    //   body: { controlId, scanId }\n    // });\n    // return response;\n\n    // Mock API response with delay to simulate remediation\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    return {\n      controlId,\n      scanId,\n      success: true,\n      message: `Successfully remediated control ${controlId}`\n    };\n  } catch (error) {\n    return rejectWithValue(error.message || `Failed to remediate control ${controlId}`);\n  }\n});\n\n// Helper function to generate mock controls\nfunction generateMockControls(seed = Date.now()) {\n  const random = (min, max) => {\n    const x = Math.sin(seed++) * 10000;\n    return Math.floor((x - Math.floor(x)) * (max - min + 1)) + min;\n  };\n  const controls = [];\n  const categories = ['IAM', 'Logging', 'Monitoring', 'Networking', 'Storage'];\n  const statuses = ['PASSED', 'FAILED', 'WARNING'];\n  const statusWeights = [0.7, 0.2, 0.1]; // 70% pass, 20% fail, 10% warning\n\n  for (let i = 1; i <= 25; i++) {\n    const category = categories[i % categories.length];\n\n    // Determine status based on weights\n    let status;\n    const roll = Math.random();\n    if (roll < statusWeights[0]) {\n      status = statuses[0]; // PASSED\n    } else if (roll < statusWeights[0] + statusWeights[1]) {\n      status = statuses[1]; // FAILED\n    } else {\n      status = statuses[2]; // WARNING\n    }\n    const hasRemediation = status === 'FAILED' && Math.random() > 0.3;\n    controls.push({\n      id: `${category}.${i}`,\n      name: `Ensure ${category} security best practice ${i}`,\n      description: `This control checks that ${category.toLowerCase()} resources follow security best practices.`,\n      category,\n      status,\n      severity: ['LOW', 'MEDIUM', 'HIGH'][random(0, 2)],\n      details: status === 'PASSED' ? 'Control requirements are satisfied.' : `Found ${random(1, 5)} resource(s) not compliant with this control.`,\n      remediation: hasRemediation ? {\n        available: true,\n        description: `Automated remediation is available for this control.`\n      } : {\n        available: false,\n        description: 'This control requires manual remediation.'\n      }\n    });\n  }\n  return controls;\n}\nconst complianceSlice = createSlice({\n  name: 'compliance',\n  initialState: {\n    currentScan: null,\n    scanHistory: [],\n    selectedScan: null,\n    loading: false,\n    scanInProgress: false,\n    remediationInProgress: false,\n    error: null,\n    remediationStatus: null\n  },\n  reducers: {\n    clearCurrentScan: state => {\n      state.currentScan = null;\n    },\n    setSelectedScan: (state, action) => {\n      state.selectedScan = action.payload;\n    },\n    clearRemediationStatus: state => {\n      state.remediationStatus = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Run scan cases\n    .addCase(runComplianceScan.pending, state => {\n      state.loading = true;\n      state.scanInProgress = true;\n      state.error = null;\n    }).addCase(runComplianceScan.fulfilled, (state, action) => {\n      state.loading = false;\n      state.scanInProgress = false;\n      state.currentScan = action.payload;\n      // Add to history if not already present\n      if (!state.scanHistory.find(scan => scan.scanId === action.payload.scanId)) {\n        state.scanHistory.unshift({\n          scanId: action.payload.scanId,\n          timestamp: action.payload.timestamp,\n          summary: action.payload.summary\n        });\n      }\n    }).addCase(runComplianceScan.rejected, (state, action) => {\n      state.loading = false;\n      state.scanInProgress = false;\n      state.error = action.payload;\n    })\n\n    // Load history cases\n    .addCase(loadScanHistory.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loadScanHistory.fulfilled, (state, action) => {\n      state.loading = false;\n      state.scanHistory = action.payload;\n    }).addCase(loadScanHistory.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Load scan by ID cases\n    .addCase(loadScanById.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loadScanById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.selectedScan = action.payload;\n    }).addCase(loadScanById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Remediate control cases\n    .addCase(remediateControl.pending, state => {\n      state.remediationInProgress = true;\n      state.error = null;\n    }).addCase(remediateControl.fulfilled, (state, action) => {\n      state.remediationInProgress = false;\n      state.remediationStatus = {\n        success: true,\n        message: action.payload.message,\n        controlId: action.payload.controlId\n      };\n\n      // Update control status in current scan and selected scan\n      const updateScanControls = scan => {\n        if (!scan || !scan.controls) return;\n        const controlIndex = scan.controls.findIndex(c => c.id === action.payload.controlId);\n        if (controlIndex !== -1) {\n          scan.controls[controlIndex].status = 'PASSED';\n          scan.controls[controlIndex].details = 'Control remediated successfully';\n\n          // Update summary\n          scan.summary.passedChecks += 1;\n          scan.summary.failedChecks -= 1;\n          scan.summary.complianceScore = Math.round(scan.summary.passedChecks / scan.summary.totalChecks * 100);\n        }\n      };\n      updateScanControls(state.currentScan);\n      updateScanControls(state.selectedScan);\n    }).addCase(remediateControl.rejected, (state, action) => {\n      state.remediationInProgress = false;\n      state.remediationStatus = {\n        success: false,\n        message: action.payload\n      };\n    });\n  }\n});\nexport const {\n  clearCurrentScan,\n  setSelectedScan,\n  clearRemediationStatus\n} = complianceSlice.actions;\nexport default complianceSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API","API_NAME","SCANS_PATH","REMEDIATE_PATH","runComplianceScan","_","rejectWithValue","Promise","resolve","setTimeout","mockResults","scanId","Date","now","timestamp","toISOString","summary","totalChecks","passedChecks","failedChecks","warningChecks","complianceScore","controls","generateMockControls","error","message","loadScanHistory","history","i","date","setDate","getDate","Math","floor","random","push","getTime","round","sort","a","b","loadScanById","seedValue","parseInt","replace","remediateControl","controlId","success","seed","min","max","x","sin","categories","statuses","statusWeights","category","length","status","roll","hasRemediation","id","name","description","toLowerCase","severity","details","remediation","available","complianceSlice","initialState","currentScan","scanHistory","selectedScan","loading","scanInProgress","remediationInProgress","remediationStatus","reducers","clearCurrentScan","state","setSelectedScan","action","payload","clearRemediationStatus","extraReducers","builder","addCase","pending","fulfilled","find","scan","unshift","rejected","updateScanControls","controlIndex","findIndex","c","actions","reducer"],"sources":["/Users/jayanthkumar/PycharmProjects/Awtomation_project_01/compliance-dashboard/src/store/complianceSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { API } from 'aws-amplify';\n\n// Mock API endpoint for compliance\nconst API_NAME = 'complianceApi';\nconst SCANS_PATH = '/scans';\nconst REMEDIATE_PATH = '/remediate';\n\n/**\n * Async thunk to run a new compliance scan\n */\nexport const runComplianceScan = createAsyncThunk(\n  'compliance/runScan',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // Uncomment when API is ready:\n      // const response = await API.post(API_NAME, SCANS_PATH);\n      // return response;\n      \n      // Mock API response with delay to simulate scan\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Generate mock scan results\n      const mockResults = {\n        scanId: `scan-${Date.now()}`,\n        timestamp: new Date().toISOString(),\n        summary: {\n          totalChecks: 25,\n          passedChecks: 18,\n          failedChecks: 5,\n          warningChecks: 2,\n          complianceScore: 72,\n        },\n        controls: generateMockControls(),\n      };\n      \n      return mockResults;\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to run compliance scan');\n    }\n  }\n);\n\n/**\n * Async thunk to load compliance scan history\n */\nexport const loadScanHistory = createAsyncThunk(\n  'compliance/loadHistory',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // Uncomment when API is ready:\n      // const response = await API.get(API_NAME, SCANS_PATH);\n      // return response;\n      \n      // Mock API response\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Generate mock scan history (last 6 scans)\n      const history = [];\n      const now = new Date();\n      \n      for (let i = 0; i < 6; i++) {\n        const date = new Date(now);\n        date.setDate(date.getDate() - i * 5); // Every 5 days\n        \n        const passedChecks = 18 + Math.floor(Math.random() * 7) - 3; // Between 15-22\n        const totalChecks = 25;\n        \n        history.push({\n          scanId: `scan-${date.getTime()}`,\n          timestamp: date.toISOString(),\n          summary: {\n            totalChecks,\n            passedChecks,\n            failedChecks: totalChecks - passedChecks - Math.floor(Math.random() * 3),\n            warningChecks: Math.floor(Math.random() * 3),\n            complianceScore: Math.round((passedChecks / totalChecks) * 100),\n          }\n        });\n      }\n      \n      return history.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to load scan history');\n    }\n  }\n);\n\n/**\n * Async thunk to load a specific scan result by ID\n */\nexport const loadScanById = createAsyncThunk(\n  'compliance/loadScanById',\n  async (scanId, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // Uncomment when API is ready:\n      // const response = await API.get(API_NAME, `${SCANS_PATH}/${scanId}`);\n      // return response;\n      \n      // Mock API response\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Generate a consistent mock result for the given scan ID\n      const seedValue = parseInt(scanId.replace('scan-', ''));\n      const mockResults = {\n        scanId,\n        timestamp: new Date(seedValue).toISOString(),\n        summary: {\n          totalChecks: 25,\n          passedChecks: 18,\n          failedChecks: 5,\n          warningChecks: 2,\n          complianceScore: 72,\n        },\n        controls: generateMockControls(seedValue),\n      };\n      \n      return mockResults;\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to load scan results');\n    }\n  }\n);\n\n/**\n * Async thunk to remediate a non-compliant control\n */\nexport const remediateControl = createAsyncThunk(\n  'compliance/remediateControl',\n  async ({ controlId, scanId }, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // Uncomment when API is ready:\n      // const response = await API.post(API_NAME, REMEDIATE_PATH, {\n      //   body: { controlId, scanId }\n      // });\n      // return response;\n      \n      // Mock API response with delay to simulate remediation\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      return {\n        controlId,\n        scanId,\n        success: true,\n        message: `Successfully remediated control ${controlId}`\n      };\n    } catch (error) {\n      return rejectWithValue(error.message || `Failed to remediate control ${controlId}`);\n    }\n  }\n);\n\n// Helper function to generate mock controls\nfunction generateMockControls(seed = Date.now()) {\n  const random = (min, max) => {\n    const x = Math.sin(seed++) * 10000;\n    return Math.floor((x - Math.floor(x)) * (max - min + 1)) + min;\n  };\n  \n  const controls = [];\n  const categories = ['IAM', 'Logging', 'Monitoring', 'Networking', 'Storage'];\n  const statuses = ['PASSED', 'FAILED', 'WARNING'];\n  const statusWeights = [0.7, 0.2, 0.1]; // 70% pass, 20% fail, 10% warning\n  \n  for (let i = 1; i <= 25; i++) {\n    const category = categories[i % categories.length];\n    \n    // Determine status based on weights\n    let status;\n    const roll = Math.random();\n    if (roll < statusWeights[0]) {\n      status = statuses[0]; // PASSED\n    } else if (roll < statusWeights[0] + statusWeights[1]) {\n      status = statuses[1]; // FAILED\n    } else {\n      status = statuses[2]; // WARNING\n    }\n    \n    const hasRemediation = status === 'FAILED' && Math.random() > 0.3;\n    \n    controls.push({\n      id: `${category}.${i}`,\n      name: `Ensure ${category} security best practice ${i}`,\n      description: `This control checks that ${category.toLowerCase()} resources follow security best practices.`,\n      category,\n      status,\n      severity: ['LOW', 'MEDIUM', 'HIGH'][random(0, 2)],\n      details: status === 'PASSED' \n        ? 'Control requirements are satisfied.' \n        : `Found ${random(1, 5)} resource(s) not compliant with this control.`,\n      remediation: hasRemediation ? {\n        available: true,\n        description: `Automated remediation is available for this control.`\n      } : {\n        available: false,\n        description: 'This control requires manual remediation.'\n      }\n    });\n  }\n  \n  return controls;\n}\n\nconst complianceSlice = createSlice({\n  name: 'compliance',\n  initialState: {\n    currentScan: null,\n    scanHistory: [],\n    selectedScan: null,\n    loading: false,\n    scanInProgress: false,\n    remediationInProgress: false,\n    error: null,\n    remediationStatus: null\n  },\n  reducers: {\n    clearCurrentScan: (state) => {\n      state.currentScan = null;\n    },\n    setSelectedScan: (state, action) => {\n      state.selectedScan = action.payload;\n    },\n    clearRemediationStatus: (state) => {\n      state.remediationStatus = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Run scan cases\n      .addCase(runComplianceScan.pending, (state) => {\n        state.loading = true;\n        state.scanInProgress = true;\n        state.error = null;\n      })\n      .addCase(runComplianceScan.fulfilled, (state, action) => {\n        state.loading = false;\n        state.scanInProgress = false;\n        state.currentScan = action.payload;\n        // Add to history if not already present\n        if (!state.scanHistory.find(scan => scan.scanId === action.payload.scanId)) {\n          state.scanHistory.unshift({\n            scanId: action.payload.scanId,\n            timestamp: action.payload.timestamp,\n            summary: action.payload.summary\n          });\n        }\n      })\n      .addCase(runComplianceScan.rejected, (state, action) => {\n        state.loading = false;\n        state.scanInProgress = false;\n        state.error = action.payload;\n      })\n      \n      // Load history cases\n      .addCase(loadScanHistory.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(loadScanHistory.fulfilled, (state, action) => {\n        state.loading = false;\n        state.scanHistory = action.payload;\n      })\n      .addCase(loadScanHistory.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Load scan by ID cases\n      .addCase(loadScanById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(loadScanById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.selectedScan = action.payload;\n      })\n      .addCase(loadScanById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Remediate control cases\n      .addCase(remediateControl.pending, (state) => {\n        state.remediationInProgress = true;\n        state.error = null;\n      })\n      .addCase(remediateControl.fulfilled, (state, action) => {\n        state.remediationInProgress = false;\n        state.remediationStatus = {\n          success: true,\n          message: action.payload.message,\n          controlId: action.payload.controlId\n        };\n        \n        // Update control status in current scan and selected scan\n        const updateScanControls = (scan) => {\n          if (!scan || !scan.controls) return;\n          \n          const controlIndex = scan.controls.findIndex(c => c.id === action.payload.controlId);\n          if (controlIndex !== -1) {\n            scan.controls[controlIndex].status = 'PASSED';\n            scan.controls[controlIndex].details = 'Control remediated successfully';\n            \n            // Update summary\n            scan.summary.passedChecks += 1;\n            scan.summary.failedChecks -= 1;\n            scan.summary.complianceScore = Math.round(\n              (scan.summary.passedChecks / scan.summary.totalChecks) * 100\n            );\n          }\n        };\n        \n        updateScanControls(state.currentScan);\n        updateScanControls(state.selectedScan);\n      })\n      .addCase(remediateControl.rejected, (state, action) => {\n        state.remediationInProgress = false;\n        state.remediationStatus = {\n          success: false,\n          message: action.payload\n        };\n      });\n  }\n});\n\nexport const { \n  clearCurrentScan,\n  setSelectedScan,\n  clearRemediationStatus \n} = complianceSlice.actions;\n\nexport default complianceSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}