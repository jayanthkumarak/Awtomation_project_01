{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { API } from 'aws-amplify';\n\n// Mock API endpoint for settings\nconst API_NAME = 'complianceApi';\nconst API_PATH = '/settings';\n\n/**\n * Async thunk to load user settings from the API\n */\nexport const loadSettings = createAsyncThunk('settings/loadSettings', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // For now, we'll simulate a delay and return mock data\n\n    // Uncomment when API is ready:\n    // const response = await API.get(API_NAME, API_PATH);\n    // return response;\n\n    // Mock API response\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      scanSchedule: 'daily',\n      emailNotifications: true,\n      notificationEmail: 'admin@example.com',\n      retentionPeriod: 90,\n      apiKey: 'mock-api-key-123456'\n    };\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to load settings');\n  }\n});\n\n/**\n * Async thunk to save user settings to the API\n */\nexport const saveSettings = createAsyncThunk('settings/saveSettings', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      settings\n    } = getState();\n    const settingsToSave = {\n      scanSchedule: settings.scanSchedule,\n      emailNotifications: settings.emailNotifications,\n      notificationEmail: settings.emailNotifications ? settings.notificationEmail : '',\n      retentionPeriod: settings.retentionPeriod\n    };\n\n    // In a real app, this would be a call to your API\n    // For now, we'll simulate a delay\n\n    // Uncomment when API is ready:\n    // const response = await API.put(API_NAME, API_PATH, {\n    //   body: settingsToSave\n    // });\n    // return response;\n\n    // Mock API response\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return settingsToSave;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to save settings');\n  }\n});\n\n/**\n * Generate a new API key\n */\nexport const generateApiKey = createAsyncThunk('settings/generateApiKey', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app, this would be a call to your API\n    // Uncomment when API is ready:\n    // const response = await API.post(API_NAME, `${API_PATH}/api-key`);\n    // return response.apiKey;\n\n    // Mock API response\n    await new Promise(resolve => setTimeout(resolve, 800));\n    return `api-key-${Math.random().toString(36).substring(2, 15)}`;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Failed to generate API key');\n  }\n});\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState: {\n    scanSchedule: 'daily',\n    emailNotifications: false,\n    notificationEmail: '',\n    retentionPeriod: 90,\n    apiKey: '',\n    loading: false,\n    saveSuccess: false,\n    error: null\n  },\n  reducers: {\n    toggleEmailNotifications: (state, action) => {\n      state.emailNotifications = action.payload;\n      if (!state.emailNotifications) {\n        state.error = null; // Clear any email-related errors\n      }\n    },\n    updateEmailAddress: (state, action) => {\n      state.notificationEmail = action.payload;\n    },\n    updateScanSchedule: (state, action) => {\n      state.scanSchedule = action.payload;\n    },\n    updateRetentionPeriod: (state, action) => {\n      state.retentionPeriod = action.payload;\n    },\n    clearSaveSuccess: state => {\n      state.saveSuccess = false;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Load settings cases\n    .addCase(loadSettings.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loadSettings.fulfilled, (state, action) => {\n      state.loading = false;\n      state.scanSchedule = action.payload.scanSchedule;\n      state.emailNotifications = action.payload.emailNotifications;\n      state.notificationEmail = action.payload.notificationEmail;\n      state.retentionPeriod = action.payload.retentionPeriod;\n      state.apiKey = action.payload.apiKey;\n    }).addCase(loadSettings.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Save settings cases\n    .addCase(saveSettings.pending, state => {\n      state.loading = true;\n      state.saveSuccess = false;\n      state.error = null;\n    }).addCase(saveSettings.fulfilled, state => {\n      state.loading = false;\n      state.saveSuccess = true;\n    }).addCase(saveSettings.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Generate API key cases\n    .addCase(generateApiKey.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(generateApiKey.fulfilled, (state, action) => {\n      state.loading = false;\n      state.apiKey = action.payload;\n    }).addCase(generateApiKey.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  toggleEmailNotifications,\n  updateEmailAddress,\n  updateScanSchedule,\n  updateRetentionPeriod,\n  clearSaveSuccess\n} = settingsSlice.actions;\nexport default settingsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API","API_NAME","API_PATH","loadSettings","_","rejectWithValue","Promise","resolve","setTimeout","scanSchedule","emailNotifications","notificationEmail","retentionPeriod","apiKey","error","message","saveSettings","getState","settings","settingsToSave","generateApiKey","Math","random","toString","substring","settingsSlice","name","initialState","loading","saveSuccess","reducers","toggleEmailNotifications","state","action","payload","updateEmailAddress","updateScanSchedule","updateRetentionPeriod","clearSaveSuccess","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/jayanthkumar/PycharmProjects/Awtomation_project_01/compliance-dashboard/src/store/settingsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { API } from 'aws-amplify';\n\n// Mock API endpoint for settings\nconst API_NAME = 'complianceApi';\nconst API_PATH = '/settings';\n\n/**\n * Async thunk to load user settings from the API\n */\nexport const loadSettings = createAsyncThunk(\n  'settings/loadSettings',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // For now, we'll simulate a delay and return mock data\n      \n      // Uncomment when API is ready:\n      // const response = await API.get(API_NAME, API_PATH);\n      // return response;\n      \n      // Mock API response\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return {\n        scanSchedule: 'daily',\n        emailNotifications: true,\n        notificationEmail: 'admin@example.com',\n        retentionPeriod: 90,\n        apiKey: 'mock-api-key-123456'\n      };\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to load settings');\n    }\n  }\n);\n\n/**\n * Async thunk to save user settings to the API\n */\nexport const saveSettings = createAsyncThunk(\n  'settings/saveSettings',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const { settings } = getState();\n      const settingsToSave = {\n        scanSchedule: settings.scanSchedule,\n        emailNotifications: settings.emailNotifications,\n        notificationEmail: settings.emailNotifications ? settings.notificationEmail : '',\n        retentionPeriod: settings.retentionPeriod\n      };\n      \n      // In a real app, this would be a call to your API\n      // For now, we'll simulate a delay\n      \n      // Uncomment when API is ready:\n      // const response = await API.put(API_NAME, API_PATH, {\n      //   body: settingsToSave\n      // });\n      // return response;\n      \n      // Mock API response\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return settingsToSave;\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to save settings');\n    }\n  }\n);\n\n/**\n * Generate a new API key\n */\nexport const generateApiKey = createAsyncThunk(\n  'settings/generateApiKey',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app, this would be a call to your API\n      // Uncomment when API is ready:\n      // const response = await API.post(API_NAME, `${API_PATH}/api-key`);\n      // return response.apiKey;\n      \n      // Mock API response\n      await new Promise(resolve => setTimeout(resolve, 800));\n      return `api-key-${Math.random().toString(36).substring(2, 15)}`;\n    } catch (error) {\n      return rejectWithValue(error.message || 'Failed to generate API key');\n    }\n  }\n);\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState: {\n    scanSchedule: 'daily',\n    emailNotifications: false,\n    notificationEmail: '',\n    retentionPeriod: 90,\n    apiKey: '',\n    loading: false,\n    saveSuccess: false,\n    error: null\n  },\n  reducers: {\n    toggleEmailNotifications: (state, action) => {\n      state.emailNotifications = action.payload;\n      if (!state.emailNotifications) {\n        state.error = null; // Clear any email-related errors\n      }\n    },\n    updateEmailAddress: (state, action) => {\n      state.notificationEmail = action.payload;\n    },\n    updateScanSchedule: (state, action) => {\n      state.scanSchedule = action.payload;\n    },\n    updateRetentionPeriod: (state, action) => {\n      state.retentionPeriod = action.payload;\n    },\n    clearSaveSuccess: (state) => {\n      state.saveSuccess = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Load settings cases\n      .addCase(loadSettings.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(loadSettings.fulfilled, (state, action) => {\n        state.loading = false;\n        state.scanSchedule = action.payload.scanSchedule;\n        state.emailNotifications = action.payload.emailNotifications;\n        state.notificationEmail = action.payload.notificationEmail;\n        state.retentionPeriod = action.payload.retentionPeriod;\n        state.apiKey = action.payload.apiKey;\n      })\n      .addCase(loadSettings.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Save settings cases\n      .addCase(saveSettings.pending, (state) => {\n        state.loading = true;\n        state.saveSuccess = false;\n        state.error = null;\n      })\n      .addCase(saveSettings.fulfilled, (state) => {\n        state.loading = false;\n        state.saveSuccess = true;\n      })\n      .addCase(saveSettings.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      \n      // Generate API key cases\n      .addCase(generateApiKey.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(generateApiKey.fulfilled, (state, action) => {\n        state.loading = false;\n        state.apiKey = action.payload;\n      })\n      .addCase(generateApiKey.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { \n  toggleEmailNotifications, \n  updateEmailAddress,\n  updateScanSchedule,\n  updateRetentionPeriod,\n  clearSaveSuccess\n} = settingsSlice.actions;\n\nexport default settingsSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}