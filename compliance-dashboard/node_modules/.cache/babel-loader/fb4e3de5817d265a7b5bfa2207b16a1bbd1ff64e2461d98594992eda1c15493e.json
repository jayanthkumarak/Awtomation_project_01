{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Auth } from 'aws-amplify';\n\n/**\n * Async thunk to sign in a user\n */\nexport const signIn = createAsyncThunk('auth/signIn', async ({\n  username,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app with AWS Amplify, use:\n    // const user = await Auth.signIn(username, password);\n    // return user;\n\n    // For development without actual AWS Amplify setup:\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    // Mock successful authentication\n    if (username === 'admin@example.com' && password === 'password') {\n      return {\n        username: 'admin@example.com',\n        attributes: {\n          email: 'admin@example.com',\n          name: 'Admin User'\n        },\n        signInUserSession: {\n          idToken: {\n            jwtToken: 'mock-token'\n          }\n        }\n      };\n    }\n    throw new Error('Invalid username or password');\n  } catch (error) {\n    return rejectWithValue(error.message || 'Authentication failed');\n  }\n});\n\n/**\n * Async thunk to sign out a user\n */\nexport const signOut = createAsyncThunk('auth/signOut', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app with AWS Amplify, use:\n    // await Auth.signOut();\n\n    // For development without actual AWS Amplify setup:\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return true;\n  } catch (error) {\n    return rejectWithValue(error.message || 'Sign out failed');\n  }\n});\n\n/**\n * Async thunk to check current authenticated session\n */\nexport const checkAuthState = createAsyncThunk('auth/checkAuthState', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app with AWS Amplify, use:\n    // const user = await Auth.currentAuthenticatedUser();\n    // return user;\n\n    // For development without actual AWS Amplify setup:\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    // Mock user session (would normally check localStorage or tokens)\n    const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';\n    if (isAuthenticated) {\n      return {\n        username: 'admin@example.com',\n        attributes: {\n          email: 'admin@example.com',\n          name: 'Admin User'\n        }\n      };\n    }\n    throw new Error('No current user');\n  } catch (error) {\n    return rejectWithValue(null); // Not throwing an error as this is an expected case\n  }\n});\n\n/**\n * Async thunk to register a new user\n */\nexport const signUp = createAsyncThunk('auth/signUp', async ({\n  username,\n  password,\n  email,\n  name\n}, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app with AWS Amplify, use:\n    // const { user } = await Auth.signUp({\n    //   username,\n    //   password,\n    //   attributes: {\n    //     email,\n    //     name,\n    //   }\n    // });\n    // return user;\n\n    // For development without actual AWS Amplify setup:\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      username,\n      userConfirmed: false,\n      userSub: `mock-sub-${Date.now()}`\n    };\n  } catch (error) {\n    return rejectWithValue(error.message || 'Registration failed');\n  }\n});\n\n/**\n * Async thunk to confirm user registration\n */\nexport const confirmSignUp = createAsyncThunk('auth/confirmSignUp', async ({\n  username,\n  code\n}, {\n  rejectWithValue\n}) => {\n  try {\n    // In a real app with AWS Amplify, use:\n    // await Auth.confirmSignUp(username, code);\n\n    // For development without actual AWS Amplify setup:\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    // Mock validation logic\n    if (code === '123456' || code === '000000') {\n      return true;\n    }\n    throw new Error('Invalid verification code');\n  } catch (error) {\n    return rejectWithValue(error.message || 'Confirmation failed');\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    error: null,\n    signUpSuccess: false,\n    confirmationSuccess: false\n  },\n  reducers: {\n    clearAuthError: state => {\n      state.error = null;\n    },\n    clearSignUpSuccess: state => {\n      state.signUpSuccess = false;\n    },\n    clearConfirmationSuccess: state => {\n      state.confirmationSuccess = false;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Check auth state cases\n    .addCase(checkAuthState.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(checkAuthState.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n      state.isAuthenticated = !!action.payload;\n    }).addCase(checkAuthState.rejected, state => {\n      state.isLoading = false;\n      state.user = null;\n      state.isAuthenticated = false;\n    })\n\n    // Sign in cases\n    .addCase(signIn.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(signIn.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n      state.isAuthenticated = true;\n      // Store auth state in localStorage for persistence\n      localStorage.setItem('isAuthenticated', 'true');\n    }).addCase(signIn.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    })\n\n    // Sign out cases\n    .addCase(signOut.pending, state => {\n      state.isLoading = true;\n    }).addCase(signOut.fulfilled, state => {\n      state.isLoading = false;\n      state.user = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem('isAuthenticated');\n    }).addCase(signOut.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    })\n\n    // Sign up cases\n    .addCase(signUp.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n      state.signUpSuccess = false;\n    }).addCase(signUp.fulfilled, state => {\n      state.isLoading = false;\n      state.signUpSuccess = true;\n    }).addCase(signUp.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    })\n\n    // Confirm sign up cases\n    .addCase(confirmSignUp.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n      state.confirmationSuccess = false;\n    }).addCase(confirmSignUp.fulfilled, state => {\n      state.isLoading = false;\n      state.confirmationSuccess = true;\n    }).addCase(confirmSignUp.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearAuthError,\n  clearSignUpSuccess,\n  clearConfirmationSuccess\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","Auth","signIn","username","password","rejectWithValue","Promise","resolve","setTimeout","attributes","email","name","signInUserSession","idToken","jwtToken","Error","error","message","signOut","_","checkAuthState","isAuthenticated","localStorage","getItem","signUp","userConfirmed","userSub","Date","now","confirmSignUp","code","authSlice","initialState","user","isLoading","signUpSuccess","confirmationSuccess","reducers","clearAuthError","state","clearSignUpSuccess","clearConfirmationSuccess","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","setItem","removeItem","actions","reducer"],"sources":["/Users/jayanthkumar/PycharmProjects/Awtomation_project_01/compliance-dashboard/src/store/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Auth } from 'aws-amplify';\n\n/**\n * Async thunk to sign in a user\n */\nexport const signIn = createAsyncThunk(\n  'auth/signIn',\n  async ({ username, password }, { rejectWithValue }) => {\n    try {\n      // In a real app with AWS Amplify, use:\n      // const user = await Auth.signIn(username, password);\n      // return user;\n      \n      // For development without actual AWS Amplify setup:\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Mock successful authentication\n      if (username === 'admin@example.com' && password === 'password') {\n        return {\n          username: 'admin@example.com',\n          attributes: {\n            email: 'admin@example.com',\n            name: 'Admin User',\n          },\n          signInUserSession: {\n            idToken: { jwtToken: 'mock-token' },\n          }\n        };\n      }\n      \n      throw new Error('Invalid username or password');\n    } catch (error) {\n      return rejectWithValue(error.message || 'Authentication failed');\n    }\n  }\n);\n\n/**\n * Async thunk to sign out a user\n */\nexport const signOut = createAsyncThunk(\n  'auth/signOut',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app with AWS Amplify, use:\n      // await Auth.signOut();\n      \n      // For development without actual AWS Amplify setup:\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return true;\n    } catch (error) {\n      return rejectWithValue(error.message || 'Sign out failed');\n    }\n  }\n);\n\n/**\n * Async thunk to check current authenticated session\n */\nexport const checkAuthState = createAsyncThunk(\n  'auth/checkAuthState',\n  async (_, { rejectWithValue }) => {\n    try {\n      // In a real app with AWS Amplify, use:\n      // const user = await Auth.currentAuthenticatedUser();\n      // return user;\n      \n      // For development without actual AWS Amplify setup:\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Mock user session (would normally check localStorage or tokens)\n      const isAuthenticated = localStorage.getItem('isAuthenticated') === 'true';\n      \n      if (isAuthenticated) {\n        return {\n          username: 'admin@example.com',\n          attributes: {\n            email: 'admin@example.com',\n            name: 'Admin User',\n          }\n        };\n      }\n      \n      throw new Error('No current user');\n    } catch (error) {\n      return rejectWithValue(null); // Not throwing an error as this is an expected case\n    }\n  }\n);\n\n/**\n * Async thunk to register a new user\n */\nexport const signUp = createAsyncThunk(\n  'auth/signUp',\n  async ({ username, password, email, name }, { rejectWithValue }) => {\n    try {\n      // In a real app with AWS Amplify, use:\n      // const { user } = await Auth.signUp({\n      //   username,\n      //   password,\n      //   attributes: {\n      //     email,\n      //     name,\n      //   }\n      // });\n      // return user;\n      \n      // For development without actual AWS Amplify setup:\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      return {\n        username,\n        userConfirmed: false,\n        userSub: `mock-sub-${Date.now()}`\n      };\n    } catch (error) {\n      return rejectWithValue(error.message || 'Registration failed');\n    }\n  }\n);\n\n/**\n * Async thunk to confirm user registration\n */\nexport const confirmSignUp = createAsyncThunk(\n  'auth/confirmSignUp',\n  async ({ username, code }, { rejectWithValue }) => {\n    try {\n      // In a real app with AWS Amplify, use:\n      // await Auth.confirmSignUp(username, code);\n      \n      // For development without actual AWS Amplify setup:\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Mock validation logic\n      if (code === '123456' || code === '000000') {\n        return true;\n      }\n      \n      throw new Error('Invalid verification code');\n    } catch (error) {\n      return rejectWithValue(error.message || 'Confirmation failed');\n    }\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    user: null,\n    isAuthenticated: false,\n    isLoading: true,\n    error: null,\n    signUpSuccess: false,\n    confirmationSuccess: false,\n  },\n  reducers: {\n    clearAuthError: (state) => {\n      state.error = null;\n    },\n    clearSignUpSuccess: (state) => {\n      state.signUpSuccess = false;\n    },\n    clearConfirmationSuccess: (state) => {\n      state.confirmationSuccess = false;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // Check auth state cases\n      .addCase(checkAuthState.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(checkAuthState.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload;\n        state.isAuthenticated = !!action.payload;\n      })\n      .addCase(checkAuthState.rejected, (state) => {\n        state.isLoading = false;\n        state.user = null;\n        state.isAuthenticated = false;\n      })\n      \n      // Sign in cases\n      .addCase(signIn.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(signIn.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload;\n        state.isAuthenticated = true;\n        // Store auth state in localStorage for persistence\n        localStorage.setItem('isAuthenticated', 'true');\n      })\n      .addCase(signIn.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // Sign out cases\n      .addCase(signOut.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(signOut.fulfilled, (state) => {\n        state.isLoading = false;\n        state.user = null;\n        state.isAuthenticated = false;\n        localStorage.removeItem('isAuthenticated');\n      })\n      .addCase(signOut.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // Sign up cases\n      .addCase(signUp.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n        state.signUpSuccess = false;\n      })\n      .addCase(signUp.fulfilled, (state) => {\n        state.isLoading = false;\n        state.signUpSuccess = true;\n      })\n      .addCase(signUp.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      })\n      \n      // Confirm sign up cases\n      .addCase(confirmSignUp.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n        state.confirmationSuccess = false;\n      })\n      .addCase(confirmSignUp.fulfilled, (state) => {\n        state.isLoading = false;\n        state.confirmationSuccess = true;\n      })\n      .addCase(confirmSignUp.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload;\n      });\n  }\n});\n\nexport const { \n  clearAuthError, \n  clearSignUpSuccess,\n  clearConfirmationSuccess\n} = authSlice.actions;\n\nexport default authSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}